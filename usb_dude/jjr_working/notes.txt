usbude i believe is just a reference to avrdude which is used to program avr devices and that this is pretty clearly a packet dump of USB handshaking

So its very likely clearly a hex burn from avrdude using the avr isp mkii programmer

most likely want to put the hex back together, then decompile it as assembly


For shits and kicks I grabbed my similar USBasp programmer from www.fischl.de and tried to output avrdude code of a bootloader and fuse burn. Those are here in this directory along with the hex I burnt (just a random arduino bootloader hex)
Update, we dug out actual avrispmkii instead

Still not familiar with how to pcap MY burn so we can compare, or if someone has one of these or an open source hardware version http://www.adafruit.com/products/708

Hrm with usbmon maybe?
http://omappedia.org/wiki/USB_Sniffing_with_tcpdump


Its probably a hex, maybe you can burn an elf from avr studio, but Im guessing they used linux tools not proprietary ones.

intel hex
http://en.wikipedia.org/wiki/Intel_HEX

every line starts with a colon, wonder if avrdude bothers to send them  0x3A

Jeremy capped our atmega hex burn, here as single_usbmon_mkii_known (all_usbmon_mkii_known in case there was some other usb hub traffic we needed)

Looking in this pcap now to find stuff in data atmega hex

if we can reconstruct our hex, we can reconstruct their hex

r29 seems to be the y register high bit, see doc0856.pdf

OK were examining the filtered output from pcap, hoping weve filtered all the data
konshu was filtering only data len 64, but we found we were missing end fragments so we've removed that filter
Now were finding our data to be way less formatted than wed like


with verbose output avrdude spit our hex back out at us, and they're actually changing it, grouping 2 lines up into one x20 length line...





1d:04:04:00:30:00:00:00  --request for top bytes of device signature?
1d:00:00:30:00:1e:00      --response 1e
1d:04:04:00:30:00:01:00   --request for middle bytes of device signature?
1d:00:00:30:00:94:00      --response 94
1d:04:04:00:30:00:02:00   --request for bottom bytes of device signature?
1d:00:00:30:00:06:00      --response 06



1d:04:04:00:30:00:00:00
1d:00:00:30:00:1e:00    --1e
1d:04:04:00:30:00:01:00
1d:00:00:30:00:93:00    --93
1d:04:04:00:30:00:02:00
1d:00:00:30:00:0f:00    --0f


Our signature is 0x1e930f !!
atmega88



so code start should look like 
06:00:00:1c:00 
but isnt in their file 06:00:00:00:00 -- maybe thats its start? no idea why different
I think 06:00:00:1f:c0 is last line of data incoming and 
06:00:00:00:00 is done.


Last 3 lines are.. kinda fucked.
avrdude even changes them around in its output (though note the pcap dump doesnt match those CHANGED values either!)
we still have teh first 120 clean-fick the rest for now

We're also throwing away the first 10 bytes. Presumably they have something to do with the address.
fuck em, figure that avr-objdump doesnt give a fuck where the program is put on disk. Well just start our addresses at 0 and increment 16dec to fake it

Created code_manually for our pcap dump, and for theirs

Jeremy is making a python script to massage it to a hex file

then I can avr-objdump -s -m atmega88 code_manually_atmega168.hex > code_manually_atmega168.hex.dump




